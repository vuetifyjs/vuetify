{
  "props": {
    "modelValue": "Controls the visibility of the command palette. Used with v-model to show/hide the dialog.",
    "items": "Array of command palette items. Supports action items (with handlers), link items (with navigation), parent items (with children for drill-down), and group items (with visual grouping).",
    "hotkey": "Global keyboard shortcut to open/close the palette (e.g., 'ctrl+k', 'cmd+shift+p'). The hotkey is registered globally and works regardless of focus.",
    "title": "Title text displayed at the top of the command palette. If not provided, no title section is shown.",
    "placeholder": "Placeholder text for the search input field. Defaults to the localized 'Search...' text.",
    "closeOnExecute": "Whether to automatically close the palette when an item is executed. Defaults to true.",
    "showSearchBackButton": "Whether to show a back navigation button in the search input when in nested navigation. Defaults to true.",
    "contained": "Renders the component inline instead of in a modal dialog, allowing it to be embedded within other components or layouts.",
    "persistent": "Prevents the dialog from closing when clicking outside the palette or pressing the Escape key.",
    "listProps": "Props object passed to the underlying VList component. Allows customization of list behavior and appearance.",
    "searchProps": "Props object passed to the underlying VCommandPaletteSearch component. Allows customization of search input behavior."
  },
  "slots": {
    "default": "Provides complete control over the palette layout. Scoped slot receives: `items` (filtered items array), `rootProps` (ARIA and container props), `getItemProps` (function to get item props for accessibility).",
    "item": "Customizes individual item rendering within the default list layout. Scoped slot receives: `item` (the item data), `props` (computed accessibility and styling props).",
    "no-data": "Content displayed when no items are available or search yields no results. No slot props provided.",
    "header": "Replaces the default header (title and search). Scoped slot receives: `search` (reactive search ref), `navigationStack` (navigation history), `title` (header title).",
    "footer": "Replaces the default footer instructions. Scoped slot receives: `hasItems` (boolean), `hasParent` (boolean), `hasSelection` (boolean), `navigationStack` (navigation history).",
    "subheader": "Content shown between header and list when there's an active search query. Scoped slot receives: `search` (reactive search ref), `filteredItems` (current results), `totalResults` (count), `hasQuery` (boolean), `navigateBack` (function), `navigationStack` (navigation history).",
    "prepend": "Content prepended to the entire component, inside the sheet container but before the header. Scoped slot receives: `search` (readonly search ref).",
    "append": "Content appended to the entire component, inside the sheet container but after the footer. Scoped slot receives: `search` (readonly search ref).",
    "prepend-list": "Content prepended to the item list, after the header but before the first item. No slot props provided.",
    "append-list": "Content appended to the item list, after the last item but before the footer. No slot props provided.",
    "search": "Complete override of the search input component. Scoped slot receives: `modelValue` (reactive search string ref)."
  },
  "events": {
    "update:modelValue": "Emitted when the palette visibility changes. Used for v-model binding. Payload: boolean (visible state).",
    "click:item": "Emitted when any item is clicked or executed via keyboard. Payload: item (raw item data), event (MouseEvent or KeyboardEvent).",
    "afterEnter": "Emitted after the dialog enter transition animation completes. No payload.",
    "afterLeave": "Emitted after the dialog leave transition animation completes. No payload."
  }
}
